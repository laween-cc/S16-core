[bits 16]
; INCLUDE

; variables

background_color: db 0
current_cursor: dw 0

; font:
characters:  
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; WHITE SPACE
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; A
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; B
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; C
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; D
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; E
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; F
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; G
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; H
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; I
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; J
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; K
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; L
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; M
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; N
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; O
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; P
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; Q
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; R
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; S
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; T
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; W
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; V
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; X
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; Y
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; Z

numbers:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 0
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 1
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 2
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 3
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 4
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 5
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 6
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 7
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 8
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ; 9

symbols:
    ; ...

; functions

raw_drawBitmap: ; 8x8
    ; params:
    ; ax -> X (COLUMN) 0 - 319
    ; dx -> Y (ROW) 0 - 199
    ; si -> NUMBERS / CHARACTERS / SYMBOLS ; (Table in FONT)
    ; bl -> CHAR / NUM / SYMBOL ; (Entry to draw in FONT)
    ; bh -> 256bit color

    push es
    push ax
    mov ax, 0xA000
    mov es, ax

    mov ax, 320
    mul dx
    mov di, ax

    pop ax
    add di, ax
    
    ; mov si, font
    push bx
    xor bh, bh
    add si, bx
    pop bx

    xor ah, ah

    .read_byte:
        mov cx, 8
        mov byte al, [si]

        .draw:
            test byte al, 10000000b
            jz .skip 

            mov byte [es:di], bh ; draw pixel

            .skip:

            shl al, 1
            inc di
        
        loop .draw
        inc ah

    .next_byte:
        cmp byte ah, 7
        je .done

        add di, 312 ; next byte (account for the bit reads)
        inc si

        jmp .read_byte

    .done:

    pop es    
    ret

raw_drawPixels:
    ; params:
    ; ax -> X (COLUMN) 0 - 319
    ; dx -> Y (ROW) 0 - 199
    ; si -> width (GROWS RIGHT) 1 - 320
    ; bl -> height (GROWS DOWN) 1 - 200
    ; bh -> 256bit color

    push es
    push ax

    mov ax, 0xA000
    mov es, ax

    mov ax, 320
    mul dx
    mov di, ax

    pop ax
    add di, ax

    ; inc si
    ; inc bl
    
    mov cl, bl
    xor ch, ch ; 0x00
    .draw:

        push cx

        mov cx, si
        .draw_width: ; columns
            mov byte [es:di], bh
            inc di
        loop .draw_width        
        
        pop cx

    ; next row
    add di, 320
    sub di, si
    loop .draw

    pop es
    ret


raw_setBackground: ; al (256bit color)

    push es
    push ax
    mov ax, 0xA000
    mov es, ax
    mov di, 0x0000
    mov cx, 64000
    pop ax
    mov [background_color], al
    mov ah, al

    .fill:

        mov word [es:di], ax
        add di, 2

    loop .fill

    pop es
    ret
